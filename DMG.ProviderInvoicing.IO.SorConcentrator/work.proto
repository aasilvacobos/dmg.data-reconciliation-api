syntax = "proto3";

package dmg.work.v1;

import "dmg/work/visit/v1/work_visit.proto";
import "google/protobuf/timestamp.proto";
import "dmg/v1/common_types.proto";
import "google/protobuf/wrappers.proto";

message Work {
    //unique identifier of work.
    string work_id = 1;
    // friendly id of the work format: {WORK TYPE PREFIX}-YYMMDD-00001.
    string work_number = 2;
    WorkStatus work_status = 3;
    // ticket reference for which the work is created
    string ticket_id = 5;
    // service line of the work request
    string service_line_id = 6;
    // service type of the work request
    string service_type_id = 7;
    string customer_id = 8;
    string special_instructions = 9;
    //scope of a work
    string description = 10;
    //property id for which the work has been created
    string property_id = 11;
    string spot_id = 12;
    google.protobuf.Timestamp created_at_utc = 13;
    // timestamp of when the ticket is last updated.
    // will store in UTC timezone.
    google.protobuf.Timestamp last_updated_at_utc = 14;
    string last_updated_by_user_id = 15;
    repeated Attachment attachments = 18;
    string created_by_user_id = 16;
    google.protobuf.Timestamp work_sla_utc = 17;
    string owner_id_user_id = 19;
    string title = 20;
    oneof work_detail {
        JobDetail job_details = 30;
    }
    int32 completion_percentage = 21;
    WorkType work_type = 22;
}

enum WorkType {
    WORK_TYPE_UNKNOWN = 0;
    WORK_TYPE_JOB = 1;
    WORK_TYPE_ESTIMATE = 2;
}

enum JobUrgency {
    JOB_URGENCY_UNKNOWN = 0;
    JOB_URGENCY_EMERGENCY = 1;
    JOB_URGENCY_HIGH = 2;
    JOB_URGENCY_NORMAL = 3;
}

enum JobState {
    JOB_STATE_UNKNOWN = 0;
    JOB_STATE_JOB_IN_DRAFT = 1;
    JOB_STATE_JOB_OPEN = 2;
    JOB_STATE_JOB_POSTED = 3;
}

enum WorkStatus {
    WORK_STATUS_UNKNOWN = 0;
    WORK_STATUS_DRAFT = 1;
    WORK_STATUS_OPEN = 2;
    WORK_STATUS_IN_PROGRESS = 3;
    WORK_STATUS_COMPLETED = 4;
    WORK_STATUS_VERIFIED = 5;
    WORK_STATUS_CLOSED = 6;
    WORK_STATUS_CANCELLED = 7;
}

message Attachment {
    // identifies if the attachment can be publicly visible or not.
    string attachment_id = 1;
    // by public it implies the attachment can shared with customer.
    // by private it implies the attachment can not be shared with customer.
    // uuid of user that created the attachment
    // VisibilityType visibility_type = 2; // commenting out for now, as asked by Suresh
    // reference id generated after uploading the attachment
    oneof content {
        dmg.v1.Photo photo = 11;
        dmg.v1.File file = 12;
    }
}

message NonCatalogItem {
    string description = 1;
}

message MaterialPartEquipmentLineItem {
    string line_item_id = 1;
    Quantity quantity = 2;
    Rate rate = 3;
    repeated Warning warnings = 4;
    FactMetaData meta_data = 5;
    LineItemStatus line_item_status = 6;
    LineItemSource line_item_source = 7;
    string name = 8;
    // Explicitly designates catalog item type as material, part, equipment rental, or equipment owned in order to allow 
    // for case when catalog item cannot be retrieved by id. Must be for both catalog and non-catalog item.
    dmg.v1.CatalogItemType item_type = 9; 
    repeated dmg.v1.Photo item_photos = 10;
    oneof ItemDetails { 
        string catalog_item_id = 11;   // replace with a CatalogItem message?
        NonCatalogItem non_catalog_item = 12;
    }
}

message TimeAdjustment {
    sint32 seconds = 1;
    FactMetaData meta_data = 2;
}

// head - regular hours //discount on trip and labor - reg
message LaborLineItem {
    //id of the line item
    string line_item_id = 1;
    // calculated from trips - this has to be calculated during fact checking to accomodate 
    // back office time on site
    uint64 total_seconds = 2;
    FactMetaData meta_data = 3;
    TechnicianType technician_type = 4;
    // Number of seconds to adjust the hours higher or lower; we are no longer using dollar amount discount.
    TimeAdjustment adjustment = 5;
}

// time on site generated by the user checking in and out
message MobileAppTimeOnSite {
    OnSiteRecord check_in_record = 1;
    OnSiteRecord check_out_record = 2;
    string work_visit_id = 3;
}

// time on site generated by edits made in the back office
message BackOfficeTimeOnSite {
    google.protobuf.Timestamp arrival_time = 1;
    google.protobuf.Timestamp departure_time = 2;
}

message TimeOnSite {
    uint32 time_on_site_seconds = 1;
    oneof TimeOnSite {
        MobileAppTimeOnSite system_tos = 2;
        BackOfficeTimeOnSite manual_tos = 3;
    }
    repeated Warning warnings = 4;
}

// originally derived from visit facts, can be modified during fact checking
message Trip {
    string trip_reference_id = 1;
    TimeOnSite time_on_site = 2;    
    string technician_id_user_id = 3;
    bool do_not_pay_for_trip_charge = 4;
    FactMetaData meta_data = 5;
    TechnicianType technician_type = 6;    
    // ???? should this be on the visit or line item level?
    LineItemStatus line_item_status = 7;
}

// A virtual transaction used by Provider Invoicing that is used to generate the actual invoice. This
// is bridging entity between the Work Fulfillment and Provider Invoicing systems.
// Name change proposals: 
// PreInvoice, DraftInvoice, ProtoInvoice - communicates that transaction is a precursor to the invoice;
//      however, we want to avoid having "invoice" in the name
// JobBilling = communicates that transaction is both related to billing while part of job
message JobBilling {
    string job_billing_id = 1; // uuid 
    string provider_invoice_number = 2;
    string provider_job_summary = 3;
    // all the P/M for this job - sourced from the technician app and provider/oc fact checking
    // the amounts and quantities here are editable by the provider/OC and do not need discounting
    repeated MaterialPartEquipmentLineItem material_part_line_items = 4;
    // all the Equipment for this job - sourced from the technician app and provider/oc fact checking
    // the amounts and quantities here are editable by the provider/OC and do not need discounting
    repeated MaterialPartEquipmentLineItem equipment_line_items = 5;
    // Information about regular techs for every visit that happened against a work
    repeated LaborLineItem labor_line_items = 6;
    // all the physical trips made - sourced from check-in/check-out and provider/OC edits
    // this contains the actual trips - these are *not* actual line items; Invoicing is responsible for that
    repeated Trip actual_trips = 7;
    // The lesser of allowable trip charges and the number of trips where the arrival_date <= scheduled_date
    int32 number_of_trips_to_charge = 8;
    // records the first time any technician from the provider arrives on site ????
    google.protobuf.Timestamp provider_technician_arrived_by_date = 9; //first check in
    google.protobuf.Timestamp system_arrive_by_date = 10; // ????
    repeated JobPhoto photos = 11;
    repeated dmg.v1.File documents = 12; //todo - wrap - async upload
    int32 version = 13;
}

message FactMetaData {
    google.protobuf.Timestamp created_at = 1;
    string created_by_user_id = 2;
    google.protobuf.Timestamp last_updated_at = 3;
    string last_updated_by_user_id = 4;
}

message JobDetail {
    JobUrgency urgency = 1;
    JobState job_state = 2;
    AssignmentDetails assignment_details = 3;
    JobRequirement requirements = 4;
    JobBilling job_billing = 5;
}

message Warning {
    string message = 1;
}

//tells what generated the line item
enum LineItemSource {
    LINE_ITEM_SOURCE_UNSPECIFIED = 0;
    LINE_ITEM_SOURCE_SYSTEM = 1;
    LINE_ITEM_SOURCE_PROVIDER = 2;
}

message Rate {
    dmg.v1.Money value = 1;
    dmg.v1.UnitType unit = 2;
}

message Correction {
    string correction_by_user_id = 1;
    string correction_at_utc = 2;
    string correction_message = 3;
    CorrectionSource correction_source = 4;
}

message Quantity {
    int32 value = 1;
    dmg.v1.UnitType unit_type = 2;
}

enum CorrectionSource {
    CORRECTION_SOURCE_UNSPECIFIED = 0;
    CORRECTION_SOURCE_INTERNAL = 1;
    CORRECTION_SOURCE_PROVIDER = 2;
    CORRECTION_SOURCE_TECHNICIAN = 3;
}

enum LineItemStatus {
    LINE_ITEM_STATUS_UNSPECIFIED = 0;
    LINE_ITEM_STATUS_VERIFIED = 1;
    LINE_ITEM_STATUS_DISPUTED = 2;
    LINE_ITEM_STATUS_REVIEW_REQUESTED = 3;
}

message OnSiteRecord {
    google.protobuf.Timestamp time_utc = 1;
    dmg.v1.GeoCoordinate geo_coordinates = 2;
}

message AssignmentDetails {
    string provider_id = 1;
    string accepted_posting_id = 3;
    string accepted_by_user_id = 4;
    google.protobuf.Timestamp accepted_at_utc = 5;
    JobSchedule schedule = 8;
    JobCosting costing = 9;
    repeated Technician assigned_technicians = 11;
}

message Technician {
    string technician_id = 1;
    TechnicianType type = 2;
    bool is_primary = 3;
    string assigned_by_user_id = 4;
    google.protobuf.Timestamp assigned_at_utc = 5;
}

enum TechnicianType {
    TECHNICIAN_TYPE_UNKNOWN = 0;
    TECHNICIAN_TYPE_REGULAR = 1;
    TECHNICIAN_TYPE_HELPER = 2;
}

message JobRequirement {
    string job_requirements_id = 1;
    int32 no_of_helper_technicians_allowed = 2;
    int32 no_of_regular_technicians_allowed = 3;
    int32 no_of_trips_allowed = 5;
    repeated dmg.work.visit.v1.CatalogItem recommended_parts = 7;
    repeated dmg.work.visit.v1.CatalogItem recommended_equipments = 8;
    repeated string conditions = 9;
    // if non-null then this is the minimum number of minutes on-site for a valid check-in - if null
    // then there is no minimum
    google.protobuf.Int32Value minimum_minutes_for_checkin = 10;
    // if non-null then the technician has to be within this number of meters for a valid checkin
    google.protobuf.Int32Value distance_for_checkin = 11;
    // if non-null then this is the maximum number of regular technicians allowed
    google.protobuf.Int32Value allowed_technicians = 12;
    // if non-null then this is the maximum number of helper technicians allowed
    google.protobuf.Int32Value allowed_helpers = 13;

    // specific items that DMG will not pay the provider - this will include items from the contract
    // that the customer won't pay for
    // if infection control (ie Covid) protocols are required
    bool infection_control_compliance = 18;
    // provider/technician needs to reach out to the on-site manager before starting work
    bool contact_onsite_manager = 19;
    // the maximum number of trips that the provider/technician will be paid for
    google.protobuf.Int32Value maximum_chargeable_trips = 20;
    string service_type_id = 22;
    // if a check-in record is required for the provider to be paid - false for parts or material
    // jobs. This is usually true.
    bool requires_check_in = 23;
    // if the same provider does multiple jobs on the same property on the same
    // day then we only get to charge trip once
    bool same_day_same_property = 24;
    // the number of before photos required or allowed - if the min == 0 then photos aren't required
    // and if the max is 0 then there is no limit
    google.protobuf.Int32Value min_before_photos = 26;
    google.protobuf.Int32Value max_before_photos = 27;
    google.protobuf.Int32Value min_after_photos = 28;
    google.protobuf.Int32Value max_after_photos = 29;
}

message JobSchedule {
    string schedule_id = 1;
    google.protobuf.Timestamp start_date_utc = 2;
    google.protobuf.Timestamp end_date_utc = 3;
}

message JobCosting {
    string costing_id = 1;
    dmg.v1.Money provider_nte = 2;
    dmg.v1.Money labor_rate = 3;
    dmg.v1.Money helper_rate = 4;
    dmg.v1.Money trip_rate = 5;
}

message FactDocument {
    string line_item_id = 1;
    LineItemSource line_item_source = 2;
    LineItemStatus line_item_status = 3;
    dmg.v1.File document = 4;
    FactMetaData meta_data = 5;
}

message Discount {
    // always negative value to be considered as discount
    dmg.v1.Money discounted_value = 1;
    FactMetaData meta_data = 2;
}

message JobPhoto {
    string line_item_id = 1;
    dmg.v1.Photo photo = 2;
    JobPhotoChronology job_photo_chronology = 3;
    bool is_available = 4;
    LineItemSource line_item_source = 5;
    FactMetaData meta_data = 6;
    // UI will provide this as string; much easier than having to maintain an enum
    string mime_type = 7;
}

message JobDocument {
    string line_item_id = 1;
    dmg.v1.File document = 2;
    bool is_available = 3;
    LineItemSource line_item_source = 4;
    FactMetaData meta_data = 5;
}

enum JobPhotoChronology {   // "chronology" terminology helps distinguish from mime type or content type 
    JOB_PHOTO_TYPE_OTHER = 0;   // this is same as "unspecified"
    JOB_PHOTO_TYPE_AFTER_PHOTO = 1;
    JOB_PHOTO_TYPE_BEFORE_PHOTO = 2;
    JOB_PHOTO_TYPE_DURING_PHOTO = 3; 
}
